class Solution:
    def isBipartite(self, graph):
        """
        :type graph: List[List[int]]
        :rtype: bool
        """
        q = collections.deque()        #deque-->popleft
        visited=[0]*len(graph)         #0-->未访问,1-->蓝,2-->红
        for i in range(len(graph)):
            if visited[i]==0 and graph[i]:
                visited[i]=1
            q.append(i)                #已经染色的序列
            while q:
                left=q.popleft()       #从0开始遍历
                for m in graph[left]:  #left的相邻点
                    if visited[m] != 0:
                        if visited[m]==visited[left]:
                            return False
                    else:
                        visited[m] = 3-visited[left]
                        q.append(m)
        return True
        
        
        
这个题很容易理解了，做法也很简单，使用众所周知的染色法。可以通过BFS或者DFS来解决。我使用的是BFS.

使用一个visited数组来保存每个节点被染的颜色。0代表没染色，1代表染成蓝色，2代表染成红色。对图的每个顶点进行一个遍历，
把和这个顶点相邻的顶点全部染成相反的颜色。如果相邻顶点已经染色，而且染色和当前顶点染色相同，则返回False。全部成功染色后返回True。

这个题没有说明是连通图，这个就很坑爹了，不能通过一次的BFS就把所有的顶点染色成功。所以需要的是一个外层的对顶点进行遍历，
一个内层的对每个顶点相邻的顶点遍历，这样两重遍历才能保证每个顶点、这个顶点相邻的顶点都被强行的染色。
