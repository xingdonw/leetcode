class Solution(object):
    def removeInvalidParentheses(self, s):
        """
        :type s: str
        :rtype: List[str]
        """
        res = []                            #结果
        visited = []                        #证明被访问过了
        self.dfs(s,self.invalid(s),res,visited)
        #return self.invalid(s)
        return res
    
    def dfs(self,s,n,res,visited):
        if n == 0:                          #如果没有多余的括号，直接返回s一种情况
            return res.append(s)
        for i in range(len(s)):             
            if s[i] in ["(",")"]:           #排除其他元素干扰，其他元素，有或者没有都无所谓
                new_s = s[:i]+s[i+1:]       #删掉这个元素，剩下组成新str
                if new_s not in set(visited) and self.invalid(new_s) < n:
                    visited.append(new_s)
                    self.dfs(new_s,self.invalid(new_s),res,visited)

    def invalid(self,s):                    #这个函数计算多余的括号个数，total表示左右匹配的和，res表示，单独“)”的个数
        total , res = 0 , 0
        for i in s:                         
            if i == "(":
                total +=1
            if i == ")" and total == 0:     #“)”为起始
                res += 1
            if i == ")" and total != 0:
                total -= 1
            
        return total + res
    
