class Solution:
    def findMinHeightTrees(self, n, edges):
        """
        :type n: int
        :type edges: List[List[int]]
        :rtype: List[int]
        """
        if n == 1: 
            return [0]

        graph = [list() for _ in range(n)]                    #[[],[],[],[]]

        for i,j in edges:
            graph[i].append(j)
            graph[j].append(i)                                 #graph=[[1],[0,2,3],[1],[1]]
        # the intuition is that in a connected graph,
        # if you pick a node of degree 1 as the root
        # then the resulting tree has the max ht.
        # so trim the leaves until there are at most 2
        # and at least 1 node left.
        
        leaves = [i for i in range(n) if len(graph[i]) == 1]    #leaves=[0,2,3],筛选出叶子-->长度为1，为叶子
        #new_leaves=[list() for _ in range(n)]
        while n > 2:       
            n -= len(leaves)       #n=1
            new_leaves = []
            for leaf in leaves:    #找每个子叶连着是谁
                neighbor = graph[leaf].pop()       #graph[0]=1
                #new_leaves[neighbor].append(0)
                graph[neighbor].remove(leaf)       #graph[1]删除0

                if len(graph[neighbor]) == 1: 
                    new_leaves.append(neighbor)
            '''
            m=0
            res=[]
            for i in range(len(new_leaves)):
                if len(new_leaves[i])==m:
                    res.append(i)
                elif len(new_leaves[i])>m:
                    m=len(new_leaves[i])
                    res=[]
                    res.append(i)
            leaves = res 
            '''
            leaves = new_leaves    #换成全局变量
        
        return leaves
        
