# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def lowestCommonAncestor(self, root, p, q):
        """
        :type root: TreeNode
        :type p: TreeNode
        :type q: TreeNode
        :rtype: TreeNode
        """
        a=min(p.val,q.val)
        b=max(p.val,q.val)
        if root==None:
            return []
        while not a<=root.val<=b:
            if a>root.val:           #p=7,q=9,root=6---->root=root.right
                root=root.right
            if root.val>b:
                root=root.left       #p=0,q=4,root=6---->root=root.left
        return root
        
     
     
     
class Solution:
    def lowestCommonAncestor(self, root, p, q):
        """
        :type root: TreeNode
        :type p: TreeNode
        :type q: TreeNode
        :rtype: TreeNode
        """
        
        while root:
            
            if root.val>p.val and root.val>q.val:
                #search left half of the bst since the root.val is greater than p and q values
                root=root.left
            elif root.val<p.val and root.val<q.val:
                # search right half
                root=root.right
            else:
                return root
