class Solution:
    def minDistance(self, word1, word2):
        """
        :type word1: str
        :type word2: str
        :rtype: int
        """
        if len(word2)==0:                     #任意一个为空，操作数为另一个长度
            return len(word1)
        if len(word1)==0:
            return len(word2)
        dp=[[0 for i in range(len(word2)+1)]for j in range(len(word1)+1)]
        
        for i in range(len(word1)+1):         #相当于，word1中的第一个字母变成word2中的第一个字母，如果不相同，就相当于要删掉前面，操作数=前面和
            dp[i][0]=i
        for j in range(len(word2)+1):
            dp[0][j]=j    
        for i in range(1,len(word1)+1):
            for j in range(1,len(word2)+1):
                if word1[i-1]==word2[j-1]:    #前一个相同，这个的长度=两个都是前一个或一个是前一个+1的操作数最小的一个
                    dp[i][j]=min(dp[i-1][j-1],min(dp[i-1][j],dp[i][j-1])+1)
                else:                         #前一个不同，都加1，之后的最小
                    dp[i][j]=min(dp[i-1][j],dp[i][j-1],dp[i-1][j-1])+1
        return dp[len(word1)][len(word2)]
