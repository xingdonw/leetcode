class Solution:
    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        self.resList = []                               #结果
        candidates = sorted(candidates)                 #排序
        self.dfs(candidates,[],target,0)
        return self.resList
    def dfs(self, candidates, sublist, target, last):   
        if target == 0:                                 #target减完了，把sublistappend进reslist
            self.resList.append(sublist[:])
        if target< candidates[0]:                       #如果target小于最小值，没可能性，返回
            return 
        for n in candidates:                            #挨个排序选择
            if n > target:                              #选出来的数字大于target，不可能，返回
                return
            if n < last:                                #防止重复，取比这个数大的可能性的之后组合
                continue
            sublist.append(n)                           #可能，sublist把这个数字放进去
            self.dfs(candidates,sublist,target - n, n)  #接着dfs，更新target
            sublist.pop()                               #把这个pop出来
