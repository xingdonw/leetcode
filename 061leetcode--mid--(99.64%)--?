# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution(object):
    def rotateRight(self, head, k):
        """
        :type head: ListNode
        :type k: int
        :rtype: ListNode
        """
        
        if head is None or head.next is None:
            return head
        
        if k==0:
            return head
            
        dummy=ListNode(0)
        dummy.next=head
        p=dummy
        length=0
        
        while p.next:                       # 得到list的长度
            length+=1
            p=p.next
        
        p.next=dummy.next                   #p重新回到初始状态

        l=step=length-(k%length)              # 得到新head的位置
        res=length-step
        while step>0:                       # 到新head的位置
            step-=1
            p=p.next                        #3-4-5

        dummy.next=p.next                   # 变化???????
        p.next=None
        
        return dummy.next
