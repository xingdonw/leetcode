# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def insertionSortList(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        if head==None or head.next==None:
            return head
        dummy=ListNode(None)            #dummy.next,是比较器，每次更改顺序后，新元素从头和dummy比较
        dummy.next=head
        p=head                          #p是序列
        while p.next:
            if p.val>p.next.val:        #如果p大于p.next，开始于dummy.next比较（使用tmp）
                tmp=dummy
                while tmp.next.val < p.next.val:  #遍历找到p.next在已经判定完顺序的链表里位置
                    tmp=tmp.next
                nextnode=p.next         #nextnode保存p.next的链表位置信息
                p.next=nextnode.next    #p.next=p.next.next
                nextnode.next=tmp.next  #p.next.next插入这个数已排序链表的剩下部分
                tmp.next=nextnode       #？？
            else:
                p=p.next
        return dummy.next
