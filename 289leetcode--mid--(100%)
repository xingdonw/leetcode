class Solution:
    def gameOfLife(self, board: 'List[List[int]]') -> 'None':
        """
        Do not return anything, modify board in-place instead.
        """
        dp=copy.deepcopy(board)             #深拷贝
        #浅拷贝：拷贝了最外围的对象本身，内部的元素都只是拷贝了一个引用而已。也就是，把对象复制一遍，但是该对象中引用的其他对象我不复制
        #深拷贝：外围和内部元素都进行了拷贝对象本身，而不是引用。也就是，把对象复制一遍，并且该对象中引用的其他对象我也复制
        for i in range(len(dp)):
            for j in range(len(dp[0])):
                tmp=0
                if (i-1)>=0:
                    if (j-1)>=0:
                        tmp+=dp[i-1][j-1]
                    if (j+1)<len(dp[0]):
                        tmp+=dp[i-1][j+1]
                    tmp+=dp[i-1][j]
                if (i+1)<len(dp):
                    if (j-1)>=0:
                        tmp+=dp[i+1][j-1]
                    if (j+1)<len(dp[0]):
                        tmp+=dp[i+1][j+1]
                    tmp+=dp[i+1][j]
                if (j-1) >= 0:
                    tmp+=dp[i][j-1]
                if (j+1) < len(dp[0]):
                    tmp+=dp[i][j+1]
                
                if dp[i][j] == 1:               #本身是1，和<2或者>3,更新为0
                    if tmp<2 or tmp>3:
                        board[i][j] = 0
                if dp[i][j] == 0:               #本身是0，和是3，更新为1
                    if tmp==3:
                        board[i][j]=1
