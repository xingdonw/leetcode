QUESTION:
Given n nodes labeled from 0 to n - 1 and a list of undirected edges (each edge is a pair of nodes), 
write a function to check whether these edges make up a valid tree.

For example:

Given n = 5 and edges = [[0, 1], [0, 2], [0, 3], [1, 4]], return true.

Given n = 5 and edges = [[0, 1], [1, 2], [2, 3], [1, 3], [1, 4]], return false.
--------------------- 

解题方法：

BFS：
关键在于如何在bfs中不走重复路径而又能判断有环，因为题目给的条件是无向图，所以在记录给出的图的边的时候，将其一条无向边记录为两条有向边。例如：
[0, 1]记录为0: 1和1: 0
当从0走向1时，将其反向边1->0删除。如果还能走回0，则说明有环。
--------------------- 


class Solution:
    # @param {int} n an integer
    # @param {int[][]} edges a list of undirected edges
    # @return {boolean} true if it's a valid tree, or false
    def validTree(self, n, edges):
        # Write your code here
        
        def dfs(root, graph, visited, parent):
            visited[root] = 1
            for nbr in graph.get(root, []):
                if nbr == parent:
                    continue
                elif visited[nbr] != 0:
                    return False
                if not dfs(nbr, graph, visited, root):
                    return False
            visited[root] = 2
            self.nodeVisited += 1
            return True

        visited = [0 for _ in range(n)]
        graph = {}
        self.nodeVisited = 0
        for edge in edges:
            start, end = edge[0], edge[1]
            graph[start] = graph.get(start, []) + [end]
            graph[end] = graph.get(end, []) + [start]
        
        if dfs(0, graph, visited, -1) and self.nodeVisited == n:
            return True
        else:
            return False
       
