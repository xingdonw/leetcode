class Solution(object):
    def firstBadVersion(self, n):
        """
        :type n: int
        :rtype: int
        """
        left = 1 
        right = n
        while left<right:
            mid =int((left+right)/2)
            if isBadVersion(mid):
                right = mid
            else:
                left=mid+1
        return left
        


class Solution:
    def firstBadVersion(self, n):
        """
        :type n: int
        :rtype: int
        """
        #versions  =  [x for x in range(0,n)]
        if n == 0:
            return 0
        
        guess = n // 2
        #print(guess)
        minimum = -1
        maximum = n + 1
        while(guess > minimum and guess < maximum):
            #If guess is the first bad version return guess
            if(isBadVersion(guess) and not isBadVersion(guess - 1)):
                return guess
            #Else if guess is bad a bad version and guess - 1 is bad then the first bad version is to the left
            #So guess halfway in between
            if(isBadVersion(guess)):
                maximum = guess
                guess = maximum - (maximum - minimum) // 2
            #Other wise the guess is not a bad version so the first bad version is to the right
            else:
                minimum = guess
                guess = minimum + (maximum - minimum) // 2
            #print(guess)
            #print(isBadVersion(guess))
        return guess
