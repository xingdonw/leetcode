# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        s=dummy=res=ListNode(None)
        add=0
        while l1 and l2:
            k=l1.val+l2.val+add
            if k//10==1:
                add=1
                k=k%10
            else:
                add=0               
            s.next=ListNode(k)
            s=s.next
            l1=l1.next
            l2=l2.next
        res=l1 or l2        #判断那个非空
        while res:
            k=res.val+add
            if k//10 == 1:
                add=1
                k=k%10
            else:
                add=0
            s.next=ListNode(k)
            s=s.next
            res=res.next
        if add==1:
            s.next=ListNode(1)
        return dummy.next
        
        
 
 
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def addTwoNumbers(self, x, y):
        # T(n) = O(n)
        # S(n) = O(1)
        dummy = node = ListNode(0)
        carry = 0
        while x or y or carry:
            x_val = x.val if x else 0
            y_val = y.val if y else 0
            s = x_val + y_val + carry
            carry = s//10
            s=s%10
            node.next = ListNode(s)
            x = x and x.next
            y = y and y.next
            node = node.next
        return dummy.next
