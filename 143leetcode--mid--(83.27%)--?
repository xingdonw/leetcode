# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def reorderList(self, head):
        """
        :type head: ListNode
        :rtype: void Do not return anything, modify head in-place instead.
        """
        
        if head==None or head.next==None or head.next.next==None:
            head= head
        else:
            fast=slow=head
            while fast.next and fast.next.next:
                fast=fast.next.next
                slow=slow.next
            head2=slow.next            # head2是后半段链表
            slow.next=None
            
            dummy=ListNode(0)          # reverse 2nd part倒转后半段
            dummy.next=head2
            p=head2.next
            head2.next=None
            
            while p:
                tmp=p
                p=p.next
                tmp.next=dummy.next
                dummy.next=tmp
            head2=dummy.next
        
            p1=head                                             # rejoin 2 parts together
            p2=head2
            while p2:
                t1=p1.next
                p1.next=p2
                t2=p2.next
                p2.next=t1
                p1=t1
                p2=t2
