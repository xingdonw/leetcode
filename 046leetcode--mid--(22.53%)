class Solution(object):
    def permute(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        if len(nums) <=1:
            return  [nums]
        tmpres = [[nums[0],nums[1]],[nums[1],nums[0]]]      #输出，起始位前两个元素，不停向里面添加新的元素顺序

        for i in range(2,len(nums)):
            newres = []                                     #加一个元素后的输出情况
            tmp = nums[i]                                   #新元素
            for j in range(len(tmpres)):
                tmpres[j].append(tmp)                       #新元素加入老序列后面，组成新情况
                for k in range(len(tmpres[j])):             #对于每一个新情况，将第一个元素放到最后，组成新情况，直到重复，得到所有结果
                    l=tmpres[j]
                    while l not in newres:
                        newres.append(l)
                        delta = l[0]
                        l=l[1:]
                        l.append(delta)
            tmpres = newres                                 #老结果更新
        return tmpres
        
        
        
只有两个元素市，只有两种排列：[1,2]，[2,1]。加入第三个元素，则原排列变为[1,2,3]，[2,1,3]，在将刚得到的两个排列的前面每一个数字和最后一个互换，
因为数字不重复，所以得到的排列也不重复。可以得到[1,2,3]，[3,2,1]，[1,3,2]，[2,1,3]，[3,1,2]，[2,3,1]。
对上述的方法进行迭代，不断加入新的元素，可以得到任意长度元素的全排列。
