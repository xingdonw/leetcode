# Definition for an interval.
# class Interval:
#     def __init__(self, s=0, e=0):
#         self.start = s
#         self.end = e

class Solution:
    def minMeetingRooms(self, intervals: 'List[Interval]') -> 'int':
        intervals.sort(key=lambda x: x.start)               #排序！！！！！
        if len(intervals)<=1:                               #长度小于1
            return len(intervals)
        res=[0] * (len(intervals)*2)                        #结果长度
        tmp=[]
        for i in range(len(intervals)):                     #起点为1，终点为-1
            tmp.append([intervals[i].start,1])
            tmp.append([intervals[i].end,-1])
        tmp.sort(key=lambda x:x[0])                         #重新排序，列成坐标轴
        res[0]=tmp[0][1]
        for i in range(1,len(tmp)):
            res[i]=res[i-1]+tmp[i][1]                       #自身的值+前一个值
        return max(res)
        
        
巧妙的是o(n)的方法：把起始结束时间标注在时间轴上，起始时间处标记+1，结束时间处标记-1；然后从时间轴左侧往右遍历，对遇到的所有数字累加，
最大的数即使需要的房间数！这样做的原因是，是在模拟人解决这个问题的思路，即：把所有的时间段都画在一张map上，找寻最多重叠时间段，
把时间段起始时间和结束时间映射为+1/-1，就把实际问题转换成了一个简单的数学问题！！！也可以理解为：实际问题建模成数学问题将有助于解题 

        
