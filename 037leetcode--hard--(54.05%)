class Solution(object):
    def solveSudoku(self, board):
        """
        :type board: List[List[str]]
        :rtype: void Do not return anything, modify board in-place instead.
        """
        def check(i,j,board):                               #check是检查随意安放的数字到底符不符合要求
            tmp=board[i][j]                                 #先把这个位置还原“.”
            board[i][j]="."
            if tmp in board[i]:                             #这一行，没这个数，否则返回false
                return False
            for u in range(len(board)):                     #这一列，没这个数，否则返回false
                if board[u][j] == tmp:
                    return False
            for u in range((i//3)*3,((i//3)+1)*3):          #最近包含它的一个正方形，没这个数，否则返回false
                for v in range((j//3)*3,((j//3)+1)*3):
                    if board[u][v] == tmp:
                        return False
            board[i][j] = tmp                               #都符合要求，把tmp按进去，继续dfs，返回true
            return True
                 
        def dfs(board):                                     #dfs，找到每一个"."
            for i in range(len(board)):
                for j in range(len(board[0])):
                    if board[i][j] == ".":
                        for tmp in "123456789":             #在1--9中任去一个数字，安放在“.”的位置，检查是否合适，如果合适接着dfs，到最后
                            board[i][j] = tmp
                            if check(i,j,board) and dfs(board):
                                return True
                            board[i][j] ="."                #不合适，回到最早，这个位置"."
                        return False
            return True
        
        dfs(board)                                          #计算
