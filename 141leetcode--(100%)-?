# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def hasCycle(self, head):
        """
        :type head: ListNode
        :rtype: bool
        """
        if head==None or head.next==None:
            return False
        p1=p2=head                          #p1每次跑1步，p2每次跑2步
        while p2.next and p2.next.next:     #判断跑得快的是否为空
            p1=p1.next
            p2=p2.next.next
            if p1==p2:                      #存在环则必然会出现相等
                return True
        return False
